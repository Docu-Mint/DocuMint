MBPP:
1: """
Finds the largest negative number in a list.

Args:
    list1: A list of numbers.

Returns:
    The largest negative number in the list.

Raises:
    ValueError: If the list is empty.
"""
==========
2: """
This function checks if a given string is a decimal number. It uses a regular expression to match strings that start with one or more digits, followed by an optional decimal point and up to two decimal places. The function returns True if the string matches the pattern, and False otherwise.

Parameters:
num (str): The string to check.

Return Value:
bool: True if the string is a decimal number, False otherwise.

Exceptions:
None.
"""
==========
3: Calculates the bitwise XOR operation on two tuples.

Args:	The first and second input is a list of integers.
The output will be another tuple with all corresponding elements from both lists having xor applied to them, in order

Returns:**  A new string containing only 'True' or ‘False’ based upon the result for each element on test_tup2.
==========
4: """
Finds the peak element in an array.

Args:
arr: The input array.
n: The length of the array.

Returns:
The index of the peak element.

Raises:
ValueError: If the array is empty.
"""
==========
5: """Returns a string containing only the odd-indexed characters from input_string.\".
"Parameters :str - The original stirng. Returns new strign with all even indices removed and remaining values shifted to left by one index in output strin
"""
==========
6: """
    Finds the top k most frequent elements in a 2D list.

    Args:
        nums: A 2D list of integers.
        k: The number of most frequent elements to return.

    Returns:
        A list of the top k most frequent elements in descending order of frequency.

    Raises:
        ValueError: If k is less than 1 or greater than the number of elements in nums.
    """
==========
7: """
The function `find_lists` takes an input and returns the number of lists in the input. If the input is a list, it returns 1. Otherwise, it returns the length of the input.
"""

HumanEval:
1: """
    Counts the number of positive digit sums in an array of integers.

    Args:
        arr: An array of integers.

    Returns:
        The number of positive digit sums in the array.

    Raises:
        TypeError: If the input is not an array of integers.
    """
==========
2: """
    Calculates the sum of the digits of a number.

    Args:
        n: A number.

    Returns:
        The sum of the digits of the number.

    Raises:
        TypeError: If the input is not an integer.
    """
==========
3: """
    Parses a string containing parentheses and returns a list of the maximum depth of each parenthesis group.

    Args:
        paren_string: A string containing parentheses.

    Returns:
        A list of integers representing the maximum depth of each parenthesis group.

    Raises:
        ValueError: If the input string is empty.
    """
==========
4: """
    Finds the largest prime factor of a given number.

    Args:
        n: The number to find the largest prime factor of.

    Returns:
        The largest prime factor of n.

    Raises:
        ValueError: If n is less than or equal to 1.
    """
    if n <= 1:
        raise ValueError("n must be greater than 1")
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            n = n // i
    return n
"""
==========
5: N/A - write comment for new function generated
==========
6: """
    Checks if a number is prime.

    Args:
        n: The number to check.

    Returns:
        True if n is prime, False otherwise.

    Raises:
        TypeError: If n is not an integer.
    """
==========
7: """
    Checks if a number is a palindrome.

    Args:
        n: The number to check.

    Returns:
        True if n is a palindrome, False otherwise.
    """

Apps:
1: """
    This function takes an input string, splits it into a list of integers, and checks if it's possible to form a list of 25s, 50s, and 100s using the given numbers.

    Args:
        None

    Returns:
        None

    Raises:
        None
    """
==========
2: """
    The main function of the program.

    This function reads a string from the input, converts each character to a base-64 integer, and then converts the base-64 integers to a binary string. The binary string is then padded with zeros to a length of 6, and the resulting string is printed to the output.

    Args:
        None

    Returns:
        None

    Raises:
        None
    """
==========
3: """
    Calculates the extended greatest common divisor (GCD) of two numbers.

    Args:
        a: The first number.
        b: The second number.

    Returns:
        A tuple containing the GCD, and the Bezout coefficients x and y.

    Raises:
        ZeroDivisionError: If a or b is zero.
    """
==========
4: """
    Checks the type of sequence based on a given string and a list of steps.

    Args:
        n (int): The length of the sequence.
        d (str): A string of characters '>' or '<', indicating the direction of movement.
        w (list): A list of integers representing the steps to take.

    Returns:
        None: Prints 'INFINITE' if the sequence is infinite, otherwise 'FINITE'.

    Raises:
        None: No exceptions are raised.
    """
==========
5: """
    Counts the minimum number of operations required to make all elements in an array equal to 0.

    Args:
        None

    Returns:
        None

    Raises:
        None
    """
==========
6: """
The `max_score()` function calculates the maximum achievable score in a game based on user input.
A player can perform two actions at each turn:
get an integer as part of their current total,
boost all integers by multiplying them with 'x'. The goal is to maximize your final 
integer after performing these turns.The `max_score()` function takes no parameters and prints the maximum achievable score
after reading input from standard in.
"""
==========
7: Solve the given array and return an index of two distinct elements in it that can be swapped to make a sorted or reversed-sorted result. If there are no such pair, then we will have -ve value as our answer

