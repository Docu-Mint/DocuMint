{
  "inference_data": {
    "source": {
      "mbpp": {
        "data": {
          "1": {
            "description": "Write a python function to find the largest negative number from the given list.",
            "function": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
          },
          "2": {
            "description": "Write a function to check the given decimal with a precision of 2 by using regex.",
            "function": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
          },
          "3": {
            "description": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
            "function": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"
          },
          "4": {
            "description": "Write a function to find the peak element in the given array.",
            "function": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n)"
          },
          "5": {
            "description": "Write a python function to remove the characters which have odd index values of a given string.",
            "function": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
          },
          "6": {
            "description": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
            "function": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
          },
          "7": {
            "description": "Write a function to find number of lists present in the given tuple.",
            "function": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input)"
          }
        }
      },
      "HumanEval": {
        "data": {
          "1": {
            "description": "Write a function which takes an array of integers and returns the number of elements which has a sum of digits greater than 0.",
            "function": "def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))"
          },
          "2": {
            "description": "Write a function which sorts the given list of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original list.",
            "function": "def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)"
          },
          "3": {
            "description": "Write a function that outputs the deepest level of nesting of parentheses given a string representing multiple groups of nested parenthesis.",
            "function": "def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]"
          },
          "4": {
            "description": " Write a function that returns the largest prime factor of n. Assume n > 1 and is not a prime.",
            "function": "def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest"
          },
          "5": {
            "description": "Write a function that finds the largest prime value from a list of integers and return the sum of its digits.",
            "function": "def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result"
          },
          "6": {
            "description": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise.",
            "function": "def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False"
          },
          "7": {
            "description": "Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive.",
            "function": "def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)"
          }
        }
      },
      "apps": {
        "data": {
          "1": {
            "description": "Write a function that determines if a booking clerk at a cinema can sell a ticket to each person in the line and give the correct change, considering the clerk starts with no money and must sell the tickets in the order of the line. Each person has a single 100, 50, or 25 ruble bill, and a ticket costs 25 rubles.",
            "function": "def __starting_point():\\n    inp = input()\\n    inp = input()\\n    L = []\\n    for iv in inp.split(' '):\\n        L.append(int(iv))\\n    vals = [0,0,0]\\n    ans = \\\"YES\\\"\\n    for iv in L:\\n        if iv == 25:\\n            vals[0]+=1\\n        if iv == 50:\\n            if vals[0]>0:\\n                vals[0]-=1\\n                vals[1]+=1\\n            else:\\n                ans = \\\"NO\\\"\\n                break\\n        if iv == 100:\\n            if vals[0]>0 and vals[1]>0:\\n                vals[2]+=1\\n                vals[0]-=1\\n                vals[1]-=1\\n            elif vals[0]>2:\\n                vals[0]-=3\\n                vals[2]+=1\\n            else:\\n                ans = \\\"NO\\\"\\n                break\\n    print(ans)\\n        \\n\\n__starting_point()\", \"n = int(input())\\n\\nms = [int(x) for x in input().split()]\\n\\nyes = True\\na = b = 0\\ns = 0\\nfor m in ms:\\n    if m == 25:\\n        a += 1\\n    elif m == 50:\\n        a -= 1\\n        b += 1\\n    elif m == 100:\\n        if b > 0:\\n            b -= 1\\n            a -= 1\\n        else:\\n            a -= 3\\n    if a < 0 or b < 0:\\n        yes = False\\n        break\\n\\nif yes:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")"
          },
          "2": {
            "description": "Write a function that, given a string s, calculates the number of pairs of words of length |s| whose bitwise AND equals s modulo 10^9 + 7, where each character in the string represents an integer in base 64 according to a predefined mapping.",
            "function": "def main():\\n    def f1(c):\\n        x = ord(c)\\n        if ord('0') <= x <= ord('9'):\\n            res = int(c)\\n        elif ord('A') <= x <= ord('Z'):\\n            res = x - ord('A') + 10\\n        elif ord('a') <= x <= ord('z'):\\n            res = x - ord('a') + 36\\n        elif c == '-':\\n            res = 62\\n        elif c == '_':\\n            res = 63\\n        return res\\n\\n    def f2(x):\\n        res = bin(x)[2:]\\n        res = '0' * (6 - len(res)) + res\\n        return res\\n\\n    read = lambda: list(map(int, input().split()))\\n    s = input()\\n    mod = 10 ** 9 + 7\\n    n = len(s)\\n    a = [f2(f1(i)) for i in s]\\n    t = ''.join(a)\\n    p = t.count('0')\\n    ans = 3 ** p % mod\\n    print(ans)\\nmain()"
          },
          "3": {
            "description": "Write a function that determines if a given phone number is unique based on the finger movements required to input it on a specific old-fashioned keyboard. The function should return \"YES\" if the number is unique and \"NO\" otherwise.",
            "function": "def main():\\n    input()\\n    seq = input()\\n\\n    LEFT = {\\n        '0': False,\\n        '1': False,\\n        '2': True,\\n        '3': True,\\n        '4': False,\\n        '5': True,\\n        '6': True,\\n        '7': False,\\n        '8': True,\\n        '9': True,\\n    }\\n    RIGHT = {\\n        '0': False,\\n        '1': True,\\n        '2': True,\\n        '3': False,\\n        '4': True,\\n        '5': True,\\n        '6': False,\\n        '7': True,\\n        '8': True,\\n        '9': False,\\n    }\\n    UP = {\\n        '0': True,\\n        '1': False,\\n        '2': False,\\n        '3': False,\\n        '4': True,\\n        '5': True,\\n        '6': True,\\n        '7': True,\\n        '8': True,\\n        '9': True,\\n    }\\n    DOWN = {\\n        '0': False,\\n        '1': True,\\n        '2': True,\\n        '3': True,\\n        '4': True,\\n        '5': True,\\n        '6': True,\\n        '7': False,\\n        '8': True,\\n        '9': False,\\n    }\\n    print('NO' if any(all(can[n] for n in seq) for can in (LEFT, RIGHT, UP, DOWN)) else 'YES')\\n\\n    \\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n = int(input())\\ns = input()\\na = [0]*10\\nfor i in range(n):\\n    a[int(s[i])] = 1\\n\\nif a[1]+a[2]+a[3] == 0 or a[7]+a[9]+a[0] == 0 or a[1]+a[4]+a[7]+a[0] == 0 or a[3] + a[6] + a[9] + a[0] == 0:\\n    print('NO')\\nelse:\\n    print('YES')"
          },
          "4": {
            "description": "Write a function that determines if a grasshopper's jumps on a 1 × n strip will be infinite or finite based on the given jump directions and lengths for each cell.",
            "function": "def __starting_point():\\n    n = int(input())\\n    d = input()\\n    w = [int(i) for i in input().split()]\\n    visited = set()\\n    i = 0\\n    while (i not in visited) and (i < n) and (i > -1):\\n        visited.add(i)\\n        if d[i] == '>':\\n            i += w[i]\\n        else:\\n            i -= w[i]\\n    if (i >= 0) and (i < n):\\n        print('INFINITE')\\n    else:\\n        print('FINITE')\\n__starting_point()\", \"n, s = int(input()), input()\\na = [int(i) for i in input().split()]\\nc = i = 0\\nwhile True:\\n    if s[i] == '>':\\n        i += a[i]\\n    else:\\n        i -= a[i]\\n    if i < 0 or i >= n:\\n        print(\\\"FINITE\\\")\\n        return\\n    c += 1\\n    if c > n:\\n        print(\\\"INFINITE\\\")\\n        return\", \"n = int(input())\\ns = input()\\na = list(map(int, input().split()))\\nWAS = False\\npos = 1\\nfor i in range(0, n) :\\n    if s[pos - 1] == '<' : pos -= a[pos - 1]\\n    else : pos += a[pos - 1]\\n    if pos < 1 or pos > n : WAS = True\\n    if WAS : break\\nif WAS : print(\\\"FINITE\\\")\\nelse : print(\\\"INFINITE\\\")\\n"
          },
          "5": {
            "description": "Write a function that, given a list of positive integers, finds a corresponding list of positive integers such that for each input integer a_i, the decimal representation of 2^k_i contains a_i as a substring within its last min(100, length(2^k_i)) digits.",
            "function": "def dlog(x, n):\\n  bigMod = 5 ** n\\n  ans = [None, 0, 1, 3, 2][x % 5]\\n  val = 2 ** ans % bigMod\\n  mod, phi = 5, 4\\n  phiVal = 2 ** phi % bigMod\\n  for i in range(2, n + 1):\\n    nextMod = mod * 5\\n    while val % nextMod != x % nextMod:\\n      val = val * phiVal % bigMod\\n      ans += phi\\n    phi *= 5\\n    phiVal = (phiVal *\\n              phiVal % bigMod *\\n              phiVal % bigMod *\\n              phiVal % bigMod *\\n              phiVal % bigMod)\\n    mod = nextMod\\n  return ans\\n\\ndef main():\\n  inp = input()\\n  n = len(inp)\\n  a = int(inp)\\n  for m in range(n + 1):\\n    l = a * 10 ** m\\n    x, mod = l, 2 ** (n + m)\\n    if x % mod != 0:\\n      x += mod - x % mod\\n    if x % 5 == 0:\\n      x += mod\\n    if x < l + 10 ** m:\\n      assert x % mod == 0 and x % 5 != 0\\n      x = x // mod\\n      mod = 5 ** (n + m)\\n      print(n + m + dlog(x % mod, n + m))\\n      return\\n  assert False\\n\\ndef __starting_point():\\n  cnt = int(input())\\n  for i in range(cnt):\\n    main()\\n__starting_point()\", \"\\n\\ndef dlog(x, n):\\n    bigMod = 5 ** n\\n    ans = [None, 0, 1, 3, 2][x % 5]\\n    val = 2 ** ans % bigMod\\n    mod, phi = 5, 4\\n    phiVal = 2 ** phi % bigMod\\n    for i in range(2, n + 1):\\n        nextMod = mod * 5\\n        while val % nextMod != x % nextMod:\\n            val = val * phiVal % bigMod\\n            ans += phi\\n        phi *= 5\\n        phiVal = (phiVal *\\n                  phiVal % bigMod *\\n                  phiVal % bigMod *\\n                  phiVal % bigMod *\\n                  phiVal % bigMod)\\n        mod = nextMod\\n    return ans\\n\\n\\ndef main():\\n    inp = input()\\n    n = len(inp)\\n    a = int(inp)\\n\\n    for m in range(n + 1):\\n        l = a * 10 ** m\\n        x, mod = l, 2 ** (n + m)\\n        if x % mod != 0:\\n            x += mod - x % mod\\n        if x % 5 == 0:\\n            x += mod\\n        if x < l + 10 ** m:\\n            x = x // mod\\n            mod = 5 ** (n + m)\\n            print(n + m + dlog(x % mod, n + m))\\n            return\\n\\ndef __starting_point():\\n    cnt = int(input())\\n    for i in range(cnt):\\n        main()\\n\\n__starting_point()\", \" #Power substring 913G\\ndef dlog(x, n):\\n  bigMod = 5 ** n\\n  ans = [None, 0, 1, 3, 2][x % 5]\\n  val = 2 ** ans % bigMod\\n  mod, phi = 5, 4\\n  pval = 2 ** phi % bigMod\\n  for i in range(2, n + 1):\\n    nextMod = mod * 5\\n    while val % nextMod != x % nextMod:\\n      val = val * pval % bigMod\\n      ans += phi\\n    phi *= 5\\n    pval = (pval * pval % bigMod * pval % bigMod *\\n              pval % bigMod *\\n              pval % bigMod)\\n    mod = nextMod\\n  return ans\\n\\ndef main():\\n  inp = input()\\n  n = len(inp)\\n  a = int(inp)\\n  for m in range(n + 1):\\n    l = a * 10 ** m\\n    x, mod = l, 2 ** (n + m)\\n    if x % mod != 0:\\n      x += mod - x % mod\\n    if x % 5 == 0:\\n      x += mod\\n    if x < l + 10 ** m:\\n      assert x % mod == 0 and x % 5 != 0\\n      x = x // mod\\n      mod = 5 ** (n + m)\\n      print(n + m + dlog(x % mod, n + m))\\n      return\\n  assert False\\n\\ndef __starting_point():\\n  cnt = int(input())\\n  for i in range(cnt):\\n    main()\\n__starting_point()\", \"def dlog(x, n):\\n  bigMod = 5 ** n\\n  ans = [None, 0, 1, 3, 2][x % 5]\\n  val = 2 ** ans % bigMod\\n  mod, phi = 5, 4\\n  phiVal = 2 ** phi % bigMod\\n  for i in range(2, n + 1):\\n    nextMod = mod * 5\\n    while val % nextMod != x % nextMod:\\n      val = val * phiVal % bigMod\\n      ans += phi\\n    phi *= 5\\n    phiVal = (phiVal *\\n              phiVal % bigMod *\\n              phiVal % bigMod *\\n              phiVal % bigMod *\\n              phiVal % bigMod)\\n    mod = nextMod\\n  return ans\\n\\ndef main():\\n  inp = input()\\n  n = len(inp)\\n  a = int(inp)\\n  for m in range(n + 1):\\n    l = a * 10 ** m\\n    x, mod = l, 2 ** (n + m)\\n    if x % mod != 0:\\n      x += mod - x % mod\\n    if x % 5 == 0:\\n      x += mod\\n    if x < l + 10 ** m:\\n      assert x % mod == 0 and x % 5 != 0\\n      x = x // mod\\n      mod = 5 ** (n + m)\\n      print(n + m + dlog(x % mod, n + m))\\n      return\\n  assert False\\n\\ndef __starting_point():\\n  cnt = int(input())\\n  for i in range(cnt):\\n    main()\\n__starting_point()"
          },
          "6": {
            "description": "Write a function that, given the number of students, the number of questions, each student's answers (as a string of length m), and the point values of each question, calculates the maximum possible total score of the class by determining the optimal set of correct answers for each question. There is exactly one correct answer per question, Incorrect answers are worth zero points.",
            "function": "def mp():\\n    return map(int, input().split())\\n\\nn, m = mp()\\ns = [input() for i in range(n)]\\na = list(mp())\\n\\nans = 0\\nfor j in range(m):\\n    cnt = [0] * 5\\n    for i in range(n):\\n        cnt[ord(s[i][j]) - 65] += 1\\n    ans += a[j] * max(cnt)\\n    #print(j + 1, cnt, ans)\\n\\nprint(ans)\", \"import math\\nfrom decimal import Decimal\\nimport heapq\\ndef na():\\n\\tn = int(input())\\n\\tb = [int(x) for x in input().split()]\\n\\treturn n,b\\n \\n \\ndef nab():\\n\\tn = int(input())\\n\\tb = [int(x) for x in input().split()]\\n\\tc = [int(x) for x in input().split()]\\n\\treturn n,b,c\\n \\n \\ndef dv():\\n\\tn, m = list(map(int, input().split()))\\n\\treturn n,m\\n \\n \\ndef dva():\\n\\tn, m = list(map(int, input().split()))\\n\\ta = [int(x) for x in input().split()]\\n\\tb = [int(x) for x in input().split()]\\n\\treturn n,m,b\\n \\n \\ndef eratosthenes(n): \\n\\tsieve = list(range(n + 1))\\n\\tfor i in sieve:\\n\\t\\tif i > 1:\\n\\t\\t\\tfor j in range(i + i, len(sieve), i):\\n\\t\\t\\t\\tsieve[j] = 0\\n\\treturn sorted(set(sieve))\\n \\n \\n \\ndef nm():\\n\\tn = int(input())\\n\\tb = [int(x) for x in input().split()]\\n\\tm = int(input())\\n\\tc = [int(x) for x in input().split()]\\n\\treturn n,b,m,c\\n \\n \\ndef dvs():\\n\\tn = int(input())\\n\\tm = int(input())\\n\\treturn n, m \\n\\n\\nn, m = list(map(int, input().split()))\\na = []\\nfor i in range(n):\\n\\ts = input()\\n\\ta.append(s)\\nb = list(map(int, input().split()))\\nans = 0\\nfor j in range(m):\\n\\td = {}\\n\\tfor i in range(n):\\n\\t\\tc = a[i][j]\\n\\t\\td[c] = d.get(c, 0) + 1\\n\\ttc = max(d.values()) * b[j]\\n\\tans += tc\\nprint(ans)"
          },
          "7": {
            "description": "Write a function that, given a string representing a correct command line in an operating system, identifies and returns the lexemes (i.e., the program name and its arguments) in the order they appear. The function should handle lexemes with spaces or empty strings enclosed in double quotes, and ensure that the output follows the specified format, with each lexeme surrounded by \"<\" and \">\" characters.",
            "function": "def printtag(s):\\n    print(\\\"<\\\" + s + \\\">\\\")\\n\\ns = input()\\nl = s.split(\\\"\\\\\\\"\\\")\\nnon_modify = 0\\nfor s in l:\\n    if non_modify:\\n        printtag(s)\\n    else:\\n        tmp_lst = s.split(\\\" \\\")\\n        for st in tmp_lst:\\n            if len(st):\\n                printtag(st)\\n    non_modify = 1 - non_modify\", \"import sys\\n# f = sys.stdin\\n# f = open(\\\"input.txt\\\", \\\"r\\\")\\na = input()\\ni = 0\\nwhile i < len(a):\\n    if a[i] == '\\\"':\\n        end = a.index('\\\"', i+1)\\n        print(\\\"<\\\", a[i+1:end], \\\">\\\", sep=\\\"\\\")\\n        i = end+1\\n    elif a[i] != \\\" \\\" != '\\\"' and (a[i-1] == \\\" \\\" or i-1 < 0):\\n        try:\\n            end = a.index(\\\" \\\", i+1)\\n        except:\\n            end = len(a)\\n        print(\\\"<\\\", a[i:end], \\\">\\\", sep=\\\"\\\")\\n        i = end+1\\n    else:\\n        i += 1\", \"s = input()\\n\\ninside = False\\nlexeme = []\\nfor c in s:\\n    if c == '\\\"':\\n        if inside:\\n            inside = False\\n            print(\\\"%s>\\\" % ''.join(lexeme))\\n            lexeme = []\\n        else:\\n            lexeme = ['<']\\n            inside = True\\n    elif c == ' ':\\n        if inside:\\n            lexeme.append(c)\\n        elif len(lexeme):\\n            print(\\\"%s>\\\" % ''.join(lexeme))\\n            lexeme = []\\n    else:\\n        if len(lexeme):\\n            lexeme.append(c)\\n        else:\\n            lexeme = ['<', c]\\nif len(lexeme):\\n    print(\\\"%s>\\\" % ''.join(lexeme))"
          }
        }
      }
    }
  }
}