[
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    },
    {
        "instruction": "def string_reverse(str1):\n    reverse_str1 = ''\n    i = len(str1)\n    while i > 0:\n        reverse_str1 += str1[i - 1]\n        i = i- 1\n    return reverse_str1",
        "response": "Returns the reversed String.\n\nParameters:\n    str1 (str):The string which is to be reversed.\n\nReturns:\n    reverse(str1):The string which gets reversed."
    },
    {
        "instruction": "def is_palindrome(s):\n    return s == s[::-1]",
        "response": "Check if a given string is a palindrome.\n\nParameters:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise."
    },
    {
        "instruction": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib",
        "response": "Generate a list of Fibonacci numbers up to the nth term.\n\nParameters:\n    n (int): The number of terms to generate.\n\nReturns:\n    list: A list of Fibonacci numbers up to the nth term."
    },
    {
        "instruction": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "response": "Perform binary search on a sorted array to find the index of a target element.\n\nParameters:\n    arr (list): The sorted array to search.\n    target (int): The target element to find.\n\nReturns:\n    int: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def count_vowels(string):\n\tvowels = 'aeiouAEIOU'\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count",
        "response": "Count the number of vowels in a given string.\n\nParameters:\n\tstring (str): The input string.\n\nReturns:\n\tint: The count of vowels in the string."
    },
    {
        "instruction": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True",
        "response": "Check if a given number is prime.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is prime, False otherwise."
    },
    {
        "instruction": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)",
        "response": "Calculate the factorial of a given number using recursion.\n\nParameters:\n\tn (int): The number to calculate the factorial of.\n\nReturns:\n\tint: The factorial of the given number."
    },
    {
        "instruction": "def merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = arr[:mid]\n\tright = arr[mid:]\n\tleft = merge_sort(left)\n\tright = merge_sort(right)\n\treturn merge(left, right)",
        "response": "Sort an array using the merge sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def is_anagram(str1, str2):\n\tstr1 = str1.lower().replace(\" \", \"\")\n\tstr2 = str2.lower().replace(\" \", \"\")\n\treturn sorted(str1) == sorted(str2)",
        "response": "Check if two strings are anagrams.\n\nParameters:\n\tstr1 (str): The first string.\n\tstr2 (str): The second string.\n\nReturns:\n\tbool: True if the strings are anagrams, False otherwise."
    },
    {
        "instruction": "def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr",
        "response": "Sort an array using the bubble sort algorithm.\n\nParameters:\n\tarr (list): The array to be sorted.\n\nReturns:\n\tlist: The sorted array."
    },
    {
        "instruction": "def linear_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == target:\n\t\t\treturn i\n\treturn -1",
        "response": "Perform linear search on an array to find the index of a target element.\n\nParameters:\n\tarr (list): The array to search.\n\ttarget (int): The target element to find.\n\nReturns:\n\tint: The index of the target element if found, -1 otherwise."
    },
    {
        "instruction": "def gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a",
        "response": "Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\nParameters:\n\ta (int): The first number.\n\tb (int): The second number.\n\nReturns:\n\tint: The GCD of the two numbers."
    },
    {
        "instruction": "def is_power_of_two(n):\n\tif n <= 0:\n\t\treturn False\n\treturn (n & (n - 1)) == 0",
        "response": "Check if a given number is a power of two.\n\nParameters:\n\tn (int): The number to check.\n\nReturns:\n\tbool: True if the number is a power of two, False otherwise."
    },
    {
        "instruction": "def count_digits(num):\n\tcount = 0\n\twhile num != 0:\n\t\tcount += 1\n\t\tnum //= 10\n\treturn count",
        "response": "Count the number of digits in a given integer.\n\nParameters:\n\tnum (int): The integer to count the digits of.\n\nReturns:\n\tint: The count of digits in the integer."
    },
    {
        "instruction": "def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\tif year % 400 == 0:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False",
        "response": "Check if a given year is a leap year.\n\nParameters:\n\tyear (int): The year to check.\n\nReturns:\n\tbool: True if the year is a leap year, False otherwise."
    },
    {
        "instruction": "def remove_duplicates(arr):\n\treturn list(set(arr))",
        "response": "Remove duplicate elements from a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tlist: The list with duplicate elements removed."
    },
    {
        "instruction": "def is_subsequence(s1, s2):\n\ti, j = 0, 0\n\twhile i < len(s1) and j < len(s2):\n\t\tif s1[i] == s2[j]:\n\t\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tj += 1\n\treturn i == len(s1)",
        "response": "Check if a string is a subsequence of another string.\n\nParameters:\n\ts1 (str): The string to check as a subsequence.\n\ts2 (str): The string to check if s1 is a subsequence of.\n\nReturns:\n\tbool: True if s1 is a subsequence of s2, False otherwise."
    },
    {
        "instruction": "def find_missing_number(arr):\n\tn = len(arr) + 1\n\texpected_sum = n * (n + 1) // 2\n\tactual_sum = sum(arr)\n\treturn expected_sum - actual_sum",
        "response": "Find the missing number in a list of integers from 1 to n.\n\nParameters:\n\tarr (list): The list of integers with one number missing.\n\nReturns:\n\tint: The missing number."
    },
    {
        "instruction": "def is_perfect_square(num):\n\tif num < 0:\n\t\treturn False\n\tsqrt = int(num ** 0.5)\n\treturn sqrt * sqrt == num",
        "response": "Check if a given number is a perfect square.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect square, False otherwise."
    },
    {
        "instruction": "def is_valid_parentheses(s):\n\tstack = []\n\tfor char in s:\n\t\tif char in '({[':\n\t\t\tstack.append(char)\n\t\telif char in ')}]':\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tif char == ')' and stack[-1] != '(':\n\t\t\t\treturn False\n\t\t\tif char == '}' and stack[-1] != '{':\n\t\t\t\treturn False\n\t\t\tif char == ']' and stack[-1] != '[':\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\treturn not stack",
        "response": "Check if a string contains valid parentheses.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string contains valid parentheses, False otherwise."
    },
    {
        "instruction": "def find_second_largest(arr):\n\tlargest = second_largest = float('-inf')\n\tfor num in arr:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest",
        "response": "Find the second largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The second largest element in the list."
    },
    {
        "instruction": "def is_armstrong_number(num):\n\tnum_str = str(num)\n\tnum_digits = len(num_str)\n\tsum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n\treturn sum_of_cubes == num",
        "response": "Check if a given number is an Armstrong number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is an Armstrong number, False otherwise."
    },
    {
        "instruction": "def find_max_subarray_sum(arr):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in arr:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum",
        "response": "Find the maximum sum of a contiguous subarray in a list.\n\nParameters:\n\tarr (list): The input list.\n\nReturns:\n\tint or float: The maximum sum of a contiguous subarray."
    },
    {
        "instruction": "def is_perfect_number(num):\n\tif num <= 0:\n\t\treturn False\n\tsum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n\treturn sum_of_divisors == num",
        "response": "Check if a given number is a perfect number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a perfect number, False otherwise."
    },
    {
        "instruction": "def find_longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tprefix = strs[0]\n\tfor string in strs[1:]:\n\t\twhile not string.startswith(prefix):\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn ''\n\treturn prefix",
        "response": "Find the longest common prefix among a list of strings.\n\nParameters:\n\tstrs (list): The list of strings.\n\nReturns:\n\tstr: The longest common prefix among the strings."
    },
    {
        "instruction": "def is_valid_palindrome(s):\n\ts = ''.join(c.lower() for c in s if c.isalnum())\n\treturn s == s[::-1]",
        "response": "Check if a given string is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity.\n\nParameters:\n\ts (str): The string to check.\n\nReturns:\n\tbool: True if the string is a valid palindrome, False otherwise."
    },
    {
        "instruction": "def find_kth_largest(arr, k):\n\tarr.sort(reverse=True)\n\treturn arr[k-1]",
        "response": "Find the kth largest element in a list.\n\nParameters:\n\tarr (list): The input list.\n\tk (int): The value of k.\n\nReturns:\n\tint or float: The kth largest element in the list."
    },
    {
        "instruction": "def is_happy_number(num):\n\tdef get_next(n):\n\t\treturn sum(int(digit) ** 2 for digit in str(n))\n\tslow = num\n\tfast = get_next(num)\n\twhile fast != 1 and slow != fast:\n\t\tslow = get_next(slow)\n\t\tfast = get_next(get_next(fast))\n\treturn fast == 1",
        "response": "Check if a given number is a happy number.\n\nParameters:\n\tnum (int): The number to check.\n\nReturns:\n\tbool: True if the number is a happy number, False otherwise."
    },
    {
        "instruction": "def find_majority_element(nums):\n\tcandidate = None\n\tcount = 0\n\tfor num in nums:\n\t\tif count == 0:\n\t\t\tcandidate = num\n\t\tcount += (1 if num == candidate else -1)\n\treturn candidate",
        "response": "Find the majority element in a list, which appears more than ⌊n / 2⌋ times.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The majority element in the list."
    },
    {
        "instruction": "def is_valid_sudoku(board):\n\tdef is_valid_row(row):\n\t\tset_row = set(row)\n\t\treturn len(set_row) == 9 and '.' not in set_row\n\tdef is_valid_col(col):\n\t\tset_col = set(col)\n\t\treturn len(set_col) == 9 and '.' not in set_col\n\tdef is_valid_box(box):\n\t\tset_box = set(box)\n\t\treturn len(set_box) == 9 and '.' not in set_box\n\tfor i in range(9):\n\t\trow = [board[i][j] for j in range(9)]\n\t\tif not is_valid_row(row):\n\t\t\treturn False\n\tfor j in range(9):\n\t\tcol = [board[i][j] for i in range(9)]\n\t\tif not is_valid_col(col):\n\t\t\treturn False\n\tfor i in range(0, 9, 3):\n\t\tfor j in range(0, 9, 3):\n\t\t\tbox = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n\t\t\tif not is_valid_box(box):\n\t\t\t\treturn False\n\treturn True",
        "response": "Check if a given Sudoku board is valid.\n\nParameters:\n\tboard (list): A 9x9 Sudoku board represented as a list of lists.\n\nReturns:\n\tbool: True if the Sudoku board is valid, False otherwise."
    },
    {
        "instruction": "def find_single_number(nums):\n\tresult = 0\n\tfor num in nums:\n\t\tresult ^= num\n\treturn result",
        "response": "Find the single number in a list where every element appears twice except for one.\n\nParameters:\n\tnums (list): The input list.\n\nReturns:\n\tint: The single number in the list."
    }
]